// Firebase Configuration
const firebaseConfig = {
  apiKey: "demo-key",
  authDomain: "modern-supermarket.firebaseapp.com",
  databaseURL: "https://modern-supermarket-default-rtdb.firebaseio.com/",
  projectId: "modern-supermarket",
  storageBucket: "modern-supermarket.appspot.com",
  messagingSenderId: "123456789",
  appId: "demo-app-id",
};

// Uncomment v√† thay ƒë·ªïi config th·ª±c t·∫ø khi deploy
// firebase.initializeApp(firebaseConfig);
// const database = firebase.database();

// D·ªØ li·ªáu s·∫£n ph·∫©m
const products = [
  { id: 1, name: "B√†n ch·∫£i ƒë√°nh rƒÉng", price: 25000, emoji: "ü™•" },
  { id: 2, name: "C√° t∆∞∆°i", price: 120000, emoji: "üêü" },
  { id: 3, name: "Th·ªãt b√≤", price: 250000, emoji: "ü•©" },
  { id: 4, name: "Tr·ª©ng g√†", price: 45000, emoji: "ü•ö" },
  { id: 5, name: "R∆∞·ª£u vang", price: 180000, emoji: "üç∑" },
  { id: 6, name: "Kem", price: 35000, emoji: "üç¶" },
  { id: 7, name: "Rau xanh", price: 20000, emoji: "ü•¨" },
  { id: 8, name: "C·ªß c√† r√≥t", price: 15000, emoji: "ü•ï" },
  { id: 9, name: "Bim bim", price: 12000, emoji: "üçø" },
  { id: 10, name: "C√† ph√™ Trung Nguy√™n", price: 85000, emoji: "‚òï" },
  { id: 11, name: "B√°nh m√¨", price: 8000, emoji: "üçû" },
  { id: 12, name: "S·ªØa t∆∞∆°i", price: 28000, emoji: "ü•õ" },
  { id: 13, name: "T√°o", price: 40000, emoji: "üçé" },
  { id: 14, name: "Chu·ªëi", price: 25000, emoji: "üçå" },
  { id: 15, name: "N∆∞·ªõc ng·ªçt", price: 15000, emoji: "ü•§" },
  { id: 16, name: "G·∫°o", price: 65000, emoji: "üçö" },
  { id: 17, name: "D·∫ßu ƒÉn", price: 55000, emoji: "ü´í" },
  { id: 18, name: "T∆∞∆°ng ·ªõt", price: 18000, emoji: "üå∂Ô∏è" },
  { id: 19, name: "K·∫πo", price: 22000, emoji: "üç¨" },
  { id: 20, name: "B√°nh quy", price: 32000, emoji: "üç™" },
];

// State management
let cart = {};
let currentOrder = null;

// Kh·ªüi t·∫°o trang
function initializePage() {
  renderProducts();
  updateCartDisplay();
}

// Render s·∫£n ph·∫©m
function renderProducts() {
  const grid = document.getElementById("productsGrid");
  grid.innerHTML = products
    .map(
      (product) => `
          <div class="product-card glass-container" data-product-id="${
            product.id
          }">
              <div class="product-emoji">${product.emoji}</div>
              <div class="product-name">${product.name}</div>
              <div class="product-price">${formatPrice(product.price)}</div>
              <div class="quantity-controls">
                  <button class="quantity-btn" onclick="changeQuantity(${
                    product.id
                  }, -1)">-</button>
                  <div class="quantity-display" id="qty-${product.id}">0</div>
                  <button class="quantity-btn" onclick="changeQuantity(${
                    product.id
                  }, 1)">+</button>
              </div>
              <button class="add-to-cart-btn" onclick="addToCart(${
                product.id
              })">
                  üõí Th√™m v√†o gi·ªè
              </button>
          </div>
      `
    )
    .join("");
}

// Thay ƒë·ªïi s·ªë l∆∞·ª£ng
function changeQuantity(productId, change) {
  const currentQty = parseInt(
    document.getElementById(`qty-${productId}`).textContent
  );
  const newQty = Math.max(0, currentQty + change);
  document.getElementById(`qty-${productId}`).textContent = newQty;
}

// Th√™m v√†o gi·ªè h√†ng
function addToCart(productId) {
  const quantity = parseInt(
    document.getElementById(`qty-${productId}`).textContent
  );
  if (quantity === 0) {
    showNotification("Vui l√≤ng ch·ªçn s·ªë l∆∞·ª£ng!", "error");
    return;
  }

  if (!cart[productId]) {
    cart[productId] = 0;
  }
  cart[productId] += quantity;

  // Reset quantity display
  document.getElementById(`qty-${productId}`).textContent = "0";

  updateCartDisplay();
  showNotification("ƒê√£ th√™m v√†o gi·ªè h√†ng!", "success");
}
// C·∫≠p nh·∫≠t progress steps
function updateProgressStep(step) {
  document.querySelectorAll(".step").forEach((el, index) => {
    if (index + 1 <= step) {
      el.classList.add("active");
    } else {
      el.classList.remove("active");
    }
  });
}

// C·∫≠p nh·∫≠t trong c√°c function chuy·ªÉn trang
// Trong showPage function, th√™m:
function showPage(pageId) {
  document.querySelectorAll(".page").forEach((page) => {
    page.classList.remove("active");
  });
  document.getElementById(pageId).classList.add("active");

  // C·∫≠p nh·∫≠t progress
  if (pageId === "productPage") updateProgressStep(1);
  else if (pageId === "shippingPage") updateProgressStep(2);
  else if (pageId === "invoicePage") updateProgressStep(3);
}
// C·∫≠p nh·∫≠t hi·ªÉn th·ªã gi·ªè h√†ng
function updateCartDisplay() {
  const cartCount = Object.values(cart).reduce((sum, qty) => sum + qty, 0);
  const cartTotal = Object.entries(cart).reduce((sum, [id, qty]) => {
    const product = products.find((p) => p.id == id);
    return sum + product.price * qty;
  }, 0);

  document.getElementById("cartCount").textContent = cartCount;
  document.getElementById("cartTotal").textContent = formatPrice(cartTotal);
  document.getElementById("totalItems").textContent = cartCount;
}

// Format gi√° ti·ªÅn
function formatPrice(price) {
  return new Intl.NumberFormat("vi-VN", {
    style: "currency",
    currency: "VND",
  }).format(price);
}

// Ti·∫øn h√†nh checkout
function proceedToCheckout() {
  if (Object.keys(cart).length === 0) {
    showNotification("Gi·ªè h√†ng tr·ªëng!", "error");
    return;
  }

  const cartItems = Object.entries(cart)
    .map(([id, qty]) => {
      const product = products.find((p) => p.id == id);
      return `${product.emoji} ${product.name} x${qty}`;
    })
    .join("<br>");

  const total = Object.entries(cart).reduce((sum, [id, qty]) => {
    const product = products.find((p) => p.id == id);
    return sum + product.price * qty;
  }, 0);

  showModal(
    `
          <h3 style="text-align: center; margin-bottom: 20px; color: #2c3e50;">
              üõí X√°c nh·∫≠n ƒë∆°n h√†ng
          </h3>
          <div style="background: rgba(255, 255, 255, 0.1); padding: 15px; border-radius: 10px; margin-bottom: 15px;">
              <strong>S·∫£n ph·∫©m:</strong><br>
              ${cartItems}
          </div>
          <div style="text-align: center; font-size: 18px; font-weight: 700; color: #e74c3c;">
              T·ªïng ti·ªÅn: ${formatPrice(total)}
          </div>
          <p style="text-align: center; margin-top: 15px; color: #666;">
              B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c ƒë·∫∑t h√†ng kh√¥ng?
          </p>
      `,
    () => {
      showPage("shippingPage");
      closeModal();
    }
  );
}

// Hi·ªÉn th·ªã trang
function showPage(pageId) {
  document.querySelectorAll(".page").forEach((page) => {
    page.classList.remove("active");
  });
  document.getElementById(pageId).classList.add("active");
}

// Quay l·∫°i trang tr∆∞·ªõc
function goBack(pageId) {
  showPage(pageId);
}

// X·ª≠ l√Ω form giao h√†ng
document
  .getElementById("shippingForm")
  .addEventListener("submit", function (e) {
    e.preventDefault();

    const formData = {
      fullName: document.getElementById("fullName").value,
      phoneNumber: document.getElementById("phoneNumber").value,
      address: document.getElementById("address").value,
      paymentMethod: document.getElementById("paymentMethod").value,
    };

    const paymentMethods = {
      cod: "Thanh to√°n khi nh·∫≠n h√†ng (COD)",
      bank: "Chuy·ªÉn kho·∫£n ng√¢n h√†ng",
      card: "Th·∫ª t√≠n d·ª•ng",
      momo: "V√≠ MoMo",
    };

    showModal(
      `
          <h3 style="text-align: center; margin-bottom: 20px; color: #2c3e50;">
              üì¶ X√°c nh·∫≠n th√¥ng tin giao h√†ng
          </h3>
          <div style="background: rgba(255, 255, 255, 0.1); padding: 15px; border-radius: 10px; margin-bottom: 15px;">
              <p><strong>üë§ Ng∆∞·ªùi nh·∫≠n:</strong> ${formData.fullName}</p>
              <p><strong>üì± ƒêi·ªán tho·∫°i:</strong> ${formData.phoneNumber}</p>
              <p><strong>üìç ƒê·ªãa ch·ªâ:</strong> ${formData.address}</p>
              <p><strong>üí≥ Thanh to√°n:</strong> ${
                paymentMethods[formData.paymentMethod]
              }</p>
          </div>
          <p style="text-align: center; margin-top: 15px; color: #666;">
              X√°c nh·∫≠n th√¥ng tin v√† ti·∫øn h√†nh giao h√†ng?
          </p>
      `,
      () => {
        processOrder(formData);
        closeModal();
      }
    );
  });

// X·ª≠ l√Ω ƒë∆°n h√†ng
function processOrder(shippingInfo) {
  const orderId = generateOrderId();
  const trackingCode = generateTrackingCode();
  const orderDate = new Date().toLocaleString("vi-VN");

  currentOrder = {
    orderId,
    trackingCode,
    orderDate,
    shippingInfo,
    items: Object.entries(cart).map(([id, qty]) => {
      const product = products.find((p) => p.id == id);
      return {
        id: product.id,
        name: product.name,
        emoji: product.emoji,
        price: product.price,
        quantity: qty,
        total: product.price * qty,
      };
    }),
    total: Object.entries(cart).reduce((sum, [id, qty]) => {
      const product = products.find((p) => p.id == id);
      return sum + product.price * qty;
    }, 0),
  };

  // L∆∞u v√†o Firebase (uncomment khi c√≥ config th·ª±c t·∫ø)
  // saveOrderToFirebase(currentOrder);

  // T·∫°o h√≥a ƒë∆°n
  generateInvoice();
  showPage("invoicePage");

  // Reset gi·ªè h√†ng
  cart = {};
  updateCartDisplay();

  showNotification("ƒê·∫∑t h√†ng th√†nh c√¥ng!", "success");
}

// T·∫°o h√≥a ƒë∆°n
function generateInvoice() {
  if (!currentOrder) return;

  document.getElementById(
    "invoiceNumber"
  ).textContent = `#${currentOrder.orderId}`;
  document.getElementById("trackingNumber").textContent =
    currentOrder.trackingCode;

  const paymentMethods = {
    cod: "Thanh to√°n khi nh·∫≠n h√†ng (COD)",
    bank: "Chuy·ªÉn kho·∫£n ng√¢n h√†ng",
    card: "Th·∫ª t√≠n d·ª•ng",
    momo: "V√≠ MoMo",
  };

  document.getElementById("invoiceDetails").innerHTML = `
          <div class="detail-row">
              <span class="detail-label">üìÖ Ng√†y ƒë·∫∑t h√†ng:</span>
              <span>${currentOrder.orderDate}</span>
          </div>
          <div class="detail-row">
              <span class="detail-label">üë§ Ng∆∞·ªùi nh·∫≠n:</span>
              <span>${currentOrder.shippingInfo.fullName}</span>
          </div>
          <div class="detail-row">
              <span class="detail-label">üì± ƒêi·ªán tho·∫°i:</span>
              <span>${currentOrder.shippingInfo.phoneNumber}</span>
          </div>
          <div class="detail-row">
              <span class="detail-label">üìç ƒê·ªãa ch·ªâ:</span>
              <span>${currentOrder.shippingInfo.address}</span>
          </div>
          <div class="detail-row">
              <span class="detail-label">üí≥ Thanh to√°n:</span>
              <span>${
                paymentMethods[currentOrder.shippingInfo.paymentMethod]
              }</span>
          </div>
      `;

  document.getElementById("invoiceItems").innerHTML = `
          <h4 style="margin-bottom: 15px; color: #2c3e50;">üìã Chi ti·∫øt ƒë∆°n h√†ng:</h4>
          ${currentOrder.items
            .map(
              (item) => `
              <div class="item-row">
                  <div class="item-name">${item.emoji} ${item.name}</div>
                  <div class="item-quantity">x${item.quantity}</div>
                  <div class="item-price">${formatPrice(item.total)}</div>
              </div>
          `
            )
            .join("")}
      `;

  document.getElementById("invoiceTotal").innerHTML = `
          <div style="font-size: 16px; margin-bottom: 5px;">T·ªïng c·ªông:</div>
          <div class="total-amount">${formatPrice(currentOrder.total)}</div>
      `;
}

// L∆∞u ƒë∆°n h√†ng v√†o Firebase
function saveOrderToFirebase(order) {
  // Uncomment khi c√≥ Firebase config th·ª±c t·∫ø
  /*
      const orderRef = database.ref('orders').push();
      orderRef.set({
          order_id: order.orderId,
          tracking_code: order.trackingCode,
          order_date: order.orderDate,
          customer_info: {
              full_name: order.shippingInfo.fullName,
              phone_number: order.shippingInfo.phoneNumber,
              delivery_address: order.shippingInfo.address,
              payment_method: order.shippingInfo.paymentMethod
          },
          order_items: order.items.map(item => ({
              product_id: item.id,
              product_name: item.name,
              product_emoji: item.emoji,
              unit_price: item.price,
              quantity: item.quantity,
              total_price: item.total
          })),
          order_total: order.total,
          order_status: 'pending',
          created_at: firebase.database.ServerValue.TIMESTAMP
      }).then(() => {
          console.log('Order saved to Firebase successfully');
      }).catch((error) => {
          console.error('Error saving order to Firebase:', error);
      });
      */
}

// T·∫°o m√£ ƒë∆°n h√†ng
function generateOrderId() {
  const now = new Date();
  const year = now.getFullYear().toString().slice(-2);
  const month = (now.getMonth() + 1).toString().padStart(2, "0");
  const day = now.getDate().toString().padStart(2, "0");
  const random = Math.floor(Math.random() * 9999)
    .toString()
    .padStart(4, "0");
  return `MS${year}${month}${day}${random}`;
}

// T·∫°o m√£ v·∫≠n ƒë∆°n
function generateTrackingCode() {
  const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  const numbers = "0123456789";
  let result = "";

  // 2 ch·ªØ c√°i ƒë·∫ßu
  for (let i = 0; i < 2; i++) {
    result += letters.charAt(Math.floor(Math.random() * letters.length));
  }

  // 8 s·ªë
  for (let i = 0; i < 8; i++) {
    result += numbers.charAt(Math.floor(Math.random() * numbers.length));
  }

  // 2 ch·ªØ c√°i cu·ªëi
  for (let i = 0; i < 2; i++) {
    result += letters.charAt(Math.floor(Math.random() * letters.length));
  }

  return result;
}

// Hi·ªÉn th·ªã modal
function showModal(content, confirmCallback) {
  document.getElementById("modalContent").innerHTML = content;
  document.getElementById("confirmModal").style.display = "block";
  document.getElementById("confirmBtn").onclick = confirmCallback;
}

// ƒê√≥ng modal
function closeModal() {
  document.getElementById("confirmModal").style.display = "none";
}

// Hi·ªÉn th·ªã th√¥ng b√°o
function showNotification(message, type) {
  const notification = document.createElement("div");
  notification.className = `notification ${type}`;
  notification.textContent = message;
  document.body.appendChild(notification);

  setTimeout(() => notification.classList.add("show"), 100);
  setTimeout(() => {
    notification.classList.remove("show");
    setTimeout(() => document.body.removeChild(notification), 300);
  }, 3000);
}

// T·∫£i h√≥a ƒë∆°n
function downloadInvoice() {
  if (!currentOrder) return;

  const invoiceContent = `
MODERN SUPERMARKET - H√† V≈© L√¢m
H√ìA ƒê∆†N ƒêI·ªÜN T·ª¨

S·ªë h√≥a ƒë∆°n: #${currentOrder.orderId}
Ng√†y: ${currentOrder.orderDate}
M√£ v·∫≠n ƒë∆°n: ${currentOrder.trackingCode}

TH√îNG TIN KH√ÅCH H√ÄNG:
- H·ªç t√™n: ${currentOrder.shippingInfo.fullName}
- ƒêi·ªán tho·∫°i: ${currentOrder.shippingInfo.phoneNumber}
- ƒê·ªãa ch·ªâ: ${currentOrder.shippingInfo.address}

CHI TI·∫æT ƒê·ªöN H√ÄNG:
${currentOrder.items
  .map((item) => `${item.name} x${item.quantity} = ${formatPrice(item.total)}`)
  .join("\n")}

T·ªîNG TI·ªÄN: ${formatPrice(currentOrder.total)}

C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!
      `;

  const blob = new Blob([invoiceContent], {
    type: "text/plain;charset=utf-8",
  });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `hoadon_${currentOrder.orderId}.txt`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  window.URL.revokeObjectURL(url);

  showNotification("ƒê√£ t·∫£i h√≥a ƒë∆°n!", "success");
}

// Quay l·∫°i mua h√†ng
function backToShopping() {
  showPage("productPage");
  currentOrder = null;
}

// Hi·ªÉn th·ªã gi·ªè h√†ng (c√≥ th·ªÉ m·ªü r·ªông th√†nh modal)
function showCart() {
  if (Object.keys(cart).length === 0) {
    showNotification("Gi·ªè h√†ng tr·ªëng!", "error");
    return;
  }

  const cartItems = Object.entries(cart)
    .map(([id, qty]) => {
      const product = products.find((p) => p.id == id);
      return `${product.emoji} ${product.name} x${qty} = ${formatPrice(
        product.price * qty
      )}`;
    })
    .join("<br>");

  const total = Object.entries(cart).reduce((sum, [id, qty]) => {
    const product = products.find((p) => p.id == id);
    return sum + product.price * qty;
  }, 0);

  showModal(
    `
          <h3 style="text-align: center; margin-bottom: 20px; color: #2c3e50;">
              üõçÔ∏è Gi·ªè h√†ng c·ªßa b·∫°n
          </h3>
          <div style="background: rgba(255, 255, 255, 0.1); padding: 15px; border-radius: 10px; margin-bottom: 15px;">
              ${cartItems}
          </div>
          <div style="text-align: center; font-size: 18px; font-weight: 700; color: #e74c3c;">
              T·ªïng ti·ªÅn: ${formatPrice(total)}
          </div>
      `,
    () => {
      closeModal();
    }
  );
}

// ƒê√≥ng modal khi click b√™n ngo√†i
window.onclick = function (event) {
  const modal = document.getElementById("confirmModal");
  if (event.target === modal) {
    closeModal();
  }
};

// Kh·ªüi t·∫°o trang khi load
document.addEventListener("DOMContentLoaded", initializePage);
